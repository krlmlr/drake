intro
consider-targets
video
that-feeling-of-workflowing
ropensci-community-call
the-drake-r-package
installation
why-drake
what-gets-done-stays-done.
reproducibility-with-confidence
evidence
ease
independent-replication
big-data-efficiency
history
reproducible-recovery
readability-and-transparency
scale-up-and-out.
with-docker
documentation
core-concepts
in-practice
use-cases
drake-projects-as-r-packages
frequently-asked-questions
reference
function-reference
tutorials
examples
presentations
context-and-history
help-and-troubleshooting
similar-work
pipeline-tools
gnu-make
remake
factuals-drake
other-pipeline-tools
memoization
literate-programming
knitr-and-r-markdown
version-control
containerization-and-r-package-environments
workflowr
acknowledgements
walkthrough
set-the-stage.
make-your-results.
go-back-and-fix-things.
history-and-provenance
reproducible-data-recovery-and-renaming
undoing-clean
renaming
try-the-code-yourself
thanks
plans
functions
intro-to-plans
a-strategy-for-building-up-plans
how-to-choose-good-targets
special-data-formats-for-targets
special-columns
static-files
urls
limitations-of-static-files
paths-must-be-literal-strings
do-not-use-inside-functions
incompatible-with-dynamic-branching
database-connections
dynamic-files
how-to-use-dynamic-files
example-of-dynamic-files
limitations-of-dynamic-files
large-plans
static
why-static-branching
grouping-variables
limitations-of-grouping-variables
tidy-evaluation
static-transformations
map
cross
split
combine
target-names
tags
dynamic
a-note-about-versions
motivation
which-kind-of-branching-should-i-use
dynamic-targets
dynamic-transformations
map-1
cross-1
group
trace
max_expand
projects
external-resources
code-files
safer-interactivity
motivation-1
usage
script-file-pitfalls
workflows-as-r-packages
other-tools
scripts
function-oriented-workflows
traditional-and-legacy-workflows
overcoming-technical-debt
dependencies
building-the-connections
run-the-workflow
keeping-the-results-up-to-date
final-thoughts
churn
churn-packages
churn-functions
churn-plan
churn-dependency-graph
run-the-keras-models
inspect-the-keras-results
add-keras-models
inspect-the-churn-results-again
update-the-churn-code
churn-history-and-provenance
stan
the-drake-project
functions-1
plan
model
index
data
fit
report
try-it-out
packages
get-the-code.
overview
analysis
other-ways-to-trigger-downloads
gsp
get-the-code.-1
objective-and-methods
data-1
analysis-1
results
comparison-with-gnu-make
references
hpc
start-small
let-make-schedule-your-targets.
the-main-process
main-process-on-a-cluster
local-main-process
parallel-backends
the-clustermq-backend
persistent-workers
installation-1
on-your-local-machine
on-a-cluster
the-future-backend
transient-workers
installation-2
on-your-local-machine-1
on-a-cluster-1
advanced-options
selectivity
memory-options
storage-options
the-template-argument-for-persistent-workers
the-resources-column-for-transient-workers
parallel-computing-within-targets
locally
persistent-workers-1
transient-workers-1
number-of-local-workers-per-target
locked-bindingenvironment-errors
time
why-is-drake-so-slow
help-us-find-out
too-many-targets
big-data
aggressive-shortcuts
time-logging
predict-total-runtime
strategize-your-high-performance-computing
memory
garbage-collection-and-custom-files
memory-strategies
data-splitting
storage
drakes-cache
efficient-target-storage
why-is-my-cache-so-big
old-targets
garbage-from-interrupted-builds
interfaces-to-the-cache
visuals
plotting-plans
vis_drake_graph
sankey_drake_graph
drake_ggraph
text_drake_graph
underlying-graph-data-node-and-edge-data-frames
visualizing-target-status
subgraphs
control-the-vis_drake_graph-legend.
clusters
output-files
node-selection
perform-the-default-action-on-select
perform-no-action-on-select
customize-the-onselect-event-behaviour
enhanced-interactivity
debugging
debugging-failed-targets
diagnosing-errors
interactive-debugging
efficient-trial-and-error
why-do-my-targets-keep-rerunning
how-your-workflow-fits-together
which-targets-are-outdated
why-your-targets-are-outdated
strategies-to-prevent-unexpected-changes-in-the-future
more-help
triggers
what-are-triggers
customization
alternative-trigger-modes
a-more-practical-example
faq
design
principles
functions-first
light-use-of-traditional-oop
high-performant-small-objects
fast-iteration-along-aggregated-data
access-to-information-across-targets
specific-classes
config
settings
plan-1
specification
graph
priority-queue
metadata
cache
api
data-2
code-analysis-lists
environments
hash-tables
logger
